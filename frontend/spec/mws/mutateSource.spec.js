/* global describe, expect, falafel, it, mongo */
describe('The mutateSource module', function () {
  var ms = mongo.mutateSource;

  /**
   * Returns an AST generated by falafel and all nodes of the specified type.
   * If the type is not specified, an empty array is returned.
   *
   * falafel adds attributes such as node.parent which many of the methods
   * under testing rely upon so esprima cannot be used be itself. However,
   * falafel does not return its AST directly, so this method takes the root
   * from the last node visited in the reverse traversal (leaf to root).
   */
  function getFalafelAST(source, nodeType) {
    var root, nodes = [];
    falafel(source, function (node) {
      root = node;
      if (nodeType && node.type === nodeType) { nodes.push(node); }
    });
    return {ast: root, nodes: nodes};
  }

  // TODO: write tests around membership access logic
  it('replaces db.collection member expressions with a Query', function () {
    var source = [
      'a.collection;',
      'db.col;',
      'db[iu].find(\'joeun nal\');'
    ].join(' ');
    var shellID = 0;
    var query = 'new mongo.Query(mongo.shells[' + shellID + '], ';
    var expected = [
      'a.collection;',
      query + '"col");',
      query + 'iu).find(\'joeun nal\');'
    ].join(' ').replace(/\s+/g, '');

    var out = getFalafelAST(source, 'MemberExpression');
    out.nodes.forEach(function (node) {
      ms._mutateMemberExpression(node, shellID);
    });
    var actual = out.ast.source().replace(/\s+/g, '');
    expect(actual).toEqual(expected);
  });

  // Todo: Decide what you're doing and then rewrite this test
  it('replaces keywords with valid JavaScript calls', function () {
    var shellID = 0;
    function getResult() {
      var args = Array.prototype.slice.call(arguments).map(function (arg) {
        return '\'' + arg + '\'';
      }).join(', ');
      args = [shellID].concat(args);
      return 'mongo.keyword.evaluate(' + args + ')';
    }
    var source = [
      'help', 'it', 'show', 'use',
      'help arg1',
      'help arg1 arg2',
      'help arg1 arg2 unusedArg',
      'not a keyword'
    ].join('; ');
    var expected = [
      getResult('help'), getResult('it'), getResult('show'), getResult('use'),
      getResult('help', 'arg1'),
      getResult('help', 'arg1', 'arg2'),
      getResult('help', 'arg1', 'arg2', 'unusedArg'),
      'not a keyword'
    ].join('; ').replace(/\s+/g, '');
    var actual = ms.swapKeywords(source, shellID).replace(/\s+/g, '');
    expect(actual).toEqual(expected);
  });

  // Todo: See note on previous test
  it('converts the given tokens into a mongo.keyword call', function () {
    var shellID = 0;
    var tokens = ['one', 'two', 'three'];
    var expected = 'mongo.keyword.evaluate(' + shellID + ', \'one\', ' +
        '\'two\', \'three\')';
    var actual = ms._convertTokensToKeywordCall(shellID, tokens);
    expect(actual).toEqual(expected);
  });
});
